#coding:utf-8
'''
Program Name: Run Model
File Name: run_model.py
Creation Date: Apr 2018
Programmer: XINWU LIU, BANGFAN LIU
Abstract: This program extract pos keypoints from json file as input
          and run models
Entry Condition: N/A
Exit Condition: N/A
Example: N/A
Program Message: N/A
Remarks: N/A
Amendment Hisotry:
            Version:
            Date:
            Programmer:
            Reason:
'''
import os
os.environ['NLS_LANG'] = 'SIMPLIFIED CHINESE_CHINA.UTF8'
import src.common as common
import src.json_reader as json_reader
import numpy as np
import pandas as pd
from model.right.pos_recog_model import wrong_head as wrong_head_right
from model.back.pos_recog_model import wrong_head as wrong_head_back
from model.right_back.pos_recog_model import wrong_head as wrong_head_right_back
import time
import src.time_check as time_check
import sys

os_sep = os.path.sep

# def add_to_db(db, qry_result, result_list, violate):
#     ''' for each result from result_list, insert it to database
#         input:
#                 db: database
#                 root_arr: path list split by '/'
#                 result_list: the result list returned by model
#                 driver: driver info
#                 violate: violate tag
#         return:
#                 a boolean flag to determine the success of db insertion
#     '''
#     global mysql_logger,save_tmp
#     mysql_logger.info('function add_to_db: execute begin')

#     # dirname = root_arr[-1].split('_')
#     # train_type, train_num, duan = dirname[0], dirname[1], dirname[2]
#     lkj_fname, video_st_tm, video_ed_tm, video_name, traintype, trainum, port, shift_num, driver,_,video_path = qry_result
#     for result in result_list:
#         ptc_fname = result[2]
#         violate_st_tm = result[0]
#         violate_ed_tm = result[4]
#         frame_st = result[1]
#         frame_ed = result[5]
#         #violate = result[3]
#         #print(result)
#         #print(qry_result)
#         #sql="insert into {0} ({1}) values (\'{2}\',\'{3}\',\'{4}\',\'{5}\',\'{6}\',\'{7}\',\'{8}\',\'{9}\',\'{10}\',\'{11}\')".format('edward_database.action_result', 'filename,traintype,trainum,start_time,end_time,start_frame,end_frame,driver,action,port', result[2], train_type, train_num, result[0], result[3], result[1], result[4], driver, violate, duan)
#         sql = "insert into violate_result.report values (\'{0}\', \'{1}\', \'{2}\', \'{3}\', \'{4}\', \'{5}\', \'{6}\', {7}, \'{8}\', \'{9}\', \'{10}\', \'{11}\', \'{12}\', \'{13}\', now(), \'{14}\')".\
#                 format(lkj_fname, video_name, video_st_tm, video_ed_tm, traintype, trainum, port, shift_num, driver, violate, violate_st_tm, violate_ed_tm, frame_st, frame_ed, video_path)
#         mysql_logger.info('function add_to_db: executing insert sql: {0}'.format(sql))
#         try:
#             db.Insert(sql)
#             mysql_logger.info('function add_to_db: insert sql execute successfully')
#             save_tmp.write(video_name + ',' + frame_st + ',' + frame_ed+'\n')
#         except Exception as e:
#             mysql_logger.error('function add_to_db: insert sql execute failed: {0}'.format(e))
#             return False
#     return True

def init(log_name):
    ''' initialization process including config parameters and logger fetch
        input: model log name
        return: config and loggers objects, json path and box info
    '''
    print('run_model initializing')
    cfg = common.get_config('config.ini')
    main_logger = common.get_logger('run_model', 'logconfig.ini', True)
    model_logger = common.get_logger(log_name, 'logconfig.ini', False)
    mysql_logger = common.get_logger('mysql', 'logconfig.ini', False)
    oracle_logger = common.get_logger('oracle', 'logconfig.ini', False)
    model_logger.info('function init: execute begin')
    json_path = cfg.get('path', 'json_out_path')
    common.path_check(json_path, main_logger, 'Json path NOT set!', 40)
    main_logger.info('function init: json path {0} get successfully'.format(json_path))
    common.file_check('config/reference_box.ini', main_logger, 'Reference_box NOT set!', 41)
    try:
        box_info = json_reader.get_reference_data('config/reference_box.ini')

        model_logger.info('function init: box config data read successfully')
    except Exception as e:
        model_logger.error('function init: box config data read failed {0}'.format(e))
    model_logger.info('function init: checking box config data')
    if box_info == None: common.raise_error('Error: box_info is None', 42)
    return cfg, main_logger, model_logger, mysql_logger, oracle_logger, json_path, box_info

def exe_model(root_arr, box_info, leave_result, num_people_result, wrong_head_result, st_time):
    ''' execute model and return results
        input:
                root_arr: path list split by '/'
                box_info: used to constrain the scope of position of drivers in a frame picture
                leave_result: the result of leave model
                wrong_head_result: the result of wrong head model
        return:
                a boolean flag used to judge the success of executing model 
    '''
    global model_logger
    exe_path = os_sep.join(root_arr)
    model_logger.info('function exe_model: custom model execute begin under path {0}'.format(exe_path))
    # read json and get posture list
    #print(os_sep.join(root_arr), box_info)
    #print(root_arr)
    model_logger.info('function exe_model: reading json files')
    rt_list = []
    #print(pd.DataFrame(json_reader.read_json(exe_path,box_info)).shape)
    try:
        rt_list = np.array(json_reader.read_json(exe_path,box_info))
    except Exception as e:
        model_logger.error('function exe_model: json file read failed {0}'.format(e))
    #print(type(rt_list))
    #print(rt_list.shape)
    #print(rt_list == np.array([]))
    if rt_list == [] or rt_list.shape[0] == 0:
        model_logger.error('function exe_model: no json file under path {0}'.format(exe_path))
        exe_flg = 0
        return exe_flg
    else:
        model_logger.info('function exe_model: json files read successfully')
        #print(rt_list[0])
        file_list = rt_list[:,0]    # first column is filename
        model_logger.info('function exe_model: file name list generate successfully')
        pos_list = rt_list[:,1:-1].astype('float32')
        num_plp_list = rt_list[:,-1].astype('float32')
        model_logger.info('function exe_model: posture list generate successfully')
        fps = root_arr[-1].split('_')[-1]    # dirname include video info
        #print(fps)
	#fps = dirname[-1]
        # format time to 'yyyy-mm-dd hh:mm:ss'
        #st_time = dirname[-3][:4] + '-' + dirname[-3][4:6] + '-' + dirname[-3][6:] + " " + dirname[-2][:2] + ":" + dirname[-2][2:4] +":"+dirname[-2][4:]
        #st_time = common.date_time_reformat(dirname[-4], dirname[-3])
        exe_flg = 0
        # for each pos coordinate
        model_logger.info('function exe_model: executing custom model')
        for i in range(len(pos_list)):
            # number of people check
            if num_plp_list[i] == 1:
                common.add_result(num_people_result, file_list[i].replace('_keypoints.json', ''), fps, st_time, '单人值乘')
            # leave check
            if pos_list[i][4] == -1:
                common.add_result(leave_result, file_list[i].replace('_keypoints.json', ''), fps, st_time, '离岗')
            else: # execute wrong head model
                wrong_head_rt = 0    
                wrong_head_model = 'wrong_head_' + root_arr[1]
                try:
                    wrong_head_rt = eval(wrong_head_model)([list(pos_list[i])])
                except Exception as e:
                    model_logger.error('function exe_model: wrong head model {0} execute failed with {1}: {2}'.format(eval(wrong_head_model).__name__, list(pos_list[i]), e))
                    exe_flg = 2

                if wrong_head_rt != 0: # model output wrong head
                    common.add_result(wrong_head_result, file_list[i].replace('_keypoints.json', ''), fps, st_time, '偏头')
                    #print([list(pos_list[i])],wrong_head_rt,file_list[i],fps, st_time)
                    #print(wrong_head_rt,file_list[i],fps, st_time)
        if not 'wrong_head_rt' in locals().keys():
            model_logger.warning('function exe_model: wrong head model does not execute: {0}'.format(pos_list))
            exe_flg = 1
        model_logger.info('function exe_model: custom model execute finish under path {0}'.format(exe_path))
        return exe_flg

# def connect_db():
#     global cfg, mysql_logger, model_logger, mysql
#     username = cfg.get('mysql', 'user')
#     password = cfg.get('mysql', 'password')
#     host = cfg.get('mysql', 'host')
#     port = cfg.get('mysql', 'port')
#     db_flag = True
#     try:
#         mysql = pyMysql.Mysql(username, password, host, port)
#     except:
#         mysql_logger.error('Database connecting Failed!')
#         model_logger.error('Database connecting Failed!')
#         db_flag = False
#     return db_flag

# def get_lkj(camera, dirname):
#     global video_pth
#     lkj_file = video_pth + os_sep + camera + os_sep + dirname + os_sep + dirname + '.csv'
#     lkj_data = pd.read_csv(lkj_file, encoding='gbk')
#     date_str = dirname.split('_')[-1]
#     date_str_fmt = date_str[:4]+'-'+date_str[4:6]+'-'+date_str[6:]
#     lkj_data_not_nan = lkj_data[pd.notnull(lkj_data['速度'])][['时间', '速度']].reset_index(drop=True)
#     lkj_data_not_nan['时间'] = [date_str_fmt+' '+ x for x in lkj_data_not_nan['时间']]
#     return lkj_data_not_nan


def update_video_table(video_name, oracle_db):
    global oracle_logger
    oracle_logger.info('function update_video_table: execute begin')

    sql = "update lkjvideoadmin.LAVDR set ISANALYZED = 1 where filepath like \'%{0}%\'".format(video_name)
    #sql = "update lkjvideoadmin.LAVDR set ISANALYZED = 1 where filename = \'http://10.196.205.47/{0}.mp4\'".format(video_name)
    oracle_logger.info('function update_video_table: executing update sql: {0}'.format(sql))
    try:
        oracle_db.Exec(sql)
        oracle_logger.info('function update_video_table: update sql execute successfully')
    except Exception as e:
        oracle_logger.error('function update_video_table: update sql execute failed: {0}'.format(e))
        return False
    return True

def update_lkj_table(oracle_db, mysql_db, lkj_id):
    global oracle_logger, mysql_logger
    #lkj_id = qry_result[-2]
    mysql_logger.info('function update_lkj_table: execute begin')
    count_sql = "select count(1) from violate_result.video_info where lkjid = {0} group by lkjid".format(lkj_id)
    mysql_logger.info('function update_lkj_table: executing counting sql : {0}'.format(count_sql))
    try:
        cnt_result = mysql_db.Query(count_sql)
        mysql_logger.info('function update_lkj_table: counting sql executing successfully')
    except Exception as e:
        mysql_logger.error('function update_lkj_table: counting sql execute failed: {0}'.format(e))
        return False
    #print(cnt_result)
    cnt = cnt_result[0][0]

    oracle_logger.info('function update_lkj_table: execute begin')
    update_sql = 'update lkjvideoadmin.lkjvideoproblem set videoanalyzed = videoanalyzed + {0}, ISANALYZED = 1 where lkjid = {1}'.format(cnt, lkj_id)
    oracle_logger.info('function update_lkj_table: executing update sql {0}'.format(update_sql))
    try:
        oracle_db.Exec(update_sql)
        oracle_logger.info('function update_lkj_table: update sql execute successfully')
    except Exception as e:
        oracle_logger.error('function update_lkj_table: update sql execute failed: {0}'.format(e))
        return False

    # update_sql = 'update lkjvideoadmin.lkjvideoproblem set ISANALYZED = 1 where lkjid = {0}'.format(lkj_id)
    # oracle_logger.info('function update_lkj_table: executing update sql {0}'.format(update_sql))
    # try:
    #     oracle_db.Exec(update_sql)
    #     oracle_logger.info('update sql execute successfully')
    # except Exception as e:
    #     oracle_logger.error('update sql execute failed: {0}'.format(e))
    #     return False

    return True

def leave_filt(leave_result, lkj_data, video_name):
    '''
        this function is used for excluding non-operate
        channel by events in lkj data
        input: 
                leave_result: openpose returned leave result list
                lkj_data: lkj dataframe
                video_name: video name
        output:
                rt_list: leave result after filtering
    '''
    rt_list = []
    for i in leave_result:
        leave_ed_tm = i[4]
        port_info=lkj_data[(lkj_data['事件']== '鸣笛开始') | (lkj_data['事件']== '鸣笛结束')][['时间', '其他']].drop_duplicates()
        channel = time_check.port_filter(port_info, leave_ed_tm, 5)
        if channel != False:
            if channel in video_name:
                rt_list.append(i)
    return rt_list

def match_lkj(qry_result,leave_result,wrong_head_result, num_people_result):
    global model_logger, video_pth
    model_logger.info('function match_lkj: execute begin')

    lkj_fname = qry_result[0][0]
    dirname = video_pth+os_sep+root_arr[1]+os_sep+root_arr[2]
    model_logger.info('function match_lkj: reading lkj data {0}/{1}'.format(dirname, lkj_fname))
    lkj_result = common.get_lkj(dirname, lkj_fname)

    match_flg = 0
    leave_final = []
    wrong_head_final = []
    double_person_final = []
    port_shift_final = []

    if lkj_result[0] == False:
        model_logger.error('function match_lkj: {0}'.format(lkj_result[1]))
        match_flg = 1
    else:
        model_logger.info('function match_lkj: lkj data read successfully')
        st_time = qry_result[0][1]
        ed_time = qry_result[0][2]
        print(st_time, ed_time)
        #\print(num_people_result)
        # execute leave judge rules
        if leave_result != []:
            main_logger.info('function match_lkj: joining lkj data and leave result')
            try:
                leave_final = time_check.lkj_time_filter(leave_result, lkj_result[1])
                main_logger.info('function match_lkj: lkj data and leave result join successfully')
            except Exception as e:
                model_logger.error('function match_lkj: lkj data and leave result join failed {0}'.format(e))
                match_flg = 2
            if leave_final != []:
                #print(leave_final)
                leave_final = leave_filt(leave_final, lkj_result[1], qry_result[0][3])

        # execute wrong head judge ruls
        if wrong_head_result != []:
            main_logger.info('function match_lkj: joining lkj data and wrong head result')
            #lkj_data = get_lkj(root_arr[1], root_arr[2])
            #print(wrong_head_result)
            try:
                wrong_head_final = time_check.lkj_time_filter(wrong_head_result, lkj_result[1])
                main_logger.info('function match_lkj: lkj data and wrong head result join successfully')
            except Exception as e:
                model_logger.error('function match_lkj: lkj data and wrong head result join failed {0}'.format(e))
                match_flg = 3
            if wrong_head_final != []:
                #print(wrong_head_final)
                wrong_head_final = leave_filt(wrong_head_final, lkj_result[1], qry_result[0][3])

        # execute double person rules
        if num_people_result != []:
            main_logger.info('function match_lkj: joining lkj data and double person result')
            try:
                double_person_final = time_check.lkj_double_person(num_people_result, lkj_result[1])
                main_logger.info('function match_lkj: lkj data and double person result join successfully')
            except Exception as e:
                model_logger.error('function match_lkj: lkj data and double person result join failed {0}'.format(e))
                match_flg = 4

            main_logger.info('function match_lkj: joining lkj data and port shift result')
            try:
                #print(num_people_result)
                port_shift_final = time_check.lkj_port_shift(num_people_result, lkj_result[1], 20, st_time, ed_time)
                main_logger.info('function match_lkj: lkj data and port shift result join successfully')
            except Exception as e:
                model_logger.error('function match_lkj: lkj data and port shift result join failed {0}'.format(e))
                match_flg = 5
            # if double_person_final != []:
            #     #print(leave_final)
            #     double_person_final = leave_filt(double_person_final, lkj_result[1], qry_result[0][3])

    return match_flg, leave_final, wrong_head_final, double_person_final, port_shift_final

if __name__ == '__main__':

    # initialize
    cfg, main_logger, model_logger, mysql_logger, oracle_logger, json_path, box_info = init('wrongHead')
    main_logger.info('function main: execute begin')
    video_pth = cfg.get('path', 'video_path')
    common.path_check(video_pth, main_logger, 'Video path NOT set!', 8)
    main_logger.info('function main: video_path {0} get successfully'.format(video_pth))
    
    # Connect to DB
    main_logger.info('function main: connecting to Mysql database')
    mysql_db = common.connect_db(cfg, mysql_logger, 'mysql')

    if mysql_db == False:
        main_logger.error('function main: mysql database connect failed')
    else:
        main_logger.info('function main: Mysql database conneting successfully')

        main_logger.info('function main: conneting to Oracle database')
        oracle_db = common.connect_db(cfg, oracle_logger, 'oracle')
        if oracle_db == False:
            main_logger.error('function main: Oracle database connect failed')
        else:
            main_logger.info('function main: Oracle database connect successfully')
            main_logger.info('function main: prepare to execute model')
            
            save_tmp=open('tmp/pict.sav', 'a+')
            main_logger.info('function main: temp file {0} generate successfully'.format(save_tmp))
            
            # trace json folder
            model_logger.info('function main: walk through dirs under json path {0}'.format(json_path))
            for root,dirs,files in os.walk(json_path):
                wrong_head_result = []
                leave_result = []
                num_people_result = []
                root_arr = root.split(os_sep)

                if len(root_arr) == 3: # used for updating lkj table
                    dir_tot_ct = len(dirs)
                    dir_ct = 0
                if len(root_arr) == 4: # if a folder contains json files
                    main_logger.info('function main: searching video infomation under path {0}'.format(root))
                    go_flg, qry_result = common.get_video_info(root_arr, mysql_db, model_logger, mysql_logger)
                    if go_flg == False:
                        main_logger.error('function main: video info get failed under path {0}'.format(root))
                    else:
                        main_logger.info('function main: video info get successfully under path {0}'.format(root))
                        #st_time = common.date_time_reformat(dirname[-4], dirname[-3])
                        #lkj_file = qry_result[0][1]
                        st_time = qry_result[0][1]
                        video_name = qry_result[0][3]
                        # execute model
                        main_logger.info('function main: custom model execute begin under path {0}'.format(root))
                        mdl_exe_rt = exe_model(root_arr, box_info, leave_result, num_people_result, wrong_head_result, st_time)
                        #print(mdl_exe_rt)
                        main_logger.info('function main: checking custom model result under path {0}'.format(root))
                        if mdl_exe_rt == 2:
                            main_logger.error('function main: custom model execute failed under path {0}'.format(root))
                        elif mdl_exe_rt == 1:
                            main_logger.warning('function main: custom model was not be executed under path {0}'.format(root))
                        elif mdl_exe_rt < 0 or mdl_exe_rt > 2:
                            main_logger.error('function main: custom model program error: return out of range under path {0}'.format(root))
                        else:
                            main_logger.info('function main: custom model execute successfully under path {0}'.format(root))
                            
                            # execute judge rules
                            main_logger.info('function main: matching lkj data and custom model result under path {0}'.format(root))
                            match_rt, leave_final, wrong_head_final, double_person_final, port_shift_final = match_lkj(qry_result,leave_result,wrong_head_result, num_people_result)

                            main_logger.info('function main: checking lkj and custom model matching result')
                            if match_rt == 1:
                                main_logger.error('function main: lkj data read error under path {0}'.format(root))
                            elif match_rt == 2:
                                main_logger.error('function main: lkj data and leave result matching error under path {0}'.format(root))
                            elif match_rt == 3:
                                main_logger.error('function main: lkj data and wrongHead result matching error under path {0}'.format(root))
                            elif match_rt == 4:
                                main_logger.error('function main: lkj data and double person result matching error under path {0}'.format(root))
                            elif match_rt == 5:
                                main_logger.error('function main: lkj data and port shift result matching error under path {0}'.format(root))
                            elif match_rt < 0 or match_rt > 5:
                                main_logger.error('function main: lkj match program error: return out of range under path {0}'.format(root))
                            else:
                                # add leave result to db
                                if leave_final == []:
                                    main_logger.info('function main: no leave detected under path {0}'.format(root))
                                else:
                                    if common.add_to_db_frame(mysql_db, qry_result[0], leave_final, 'violate_result.report', '离岗', mysql_logger, save_tmp) == False:
                                        main_logger.error('function main: leave result insert to db failed under path {0}'.format(root))
                                    else:
                                        main_logger.info('function main: leave result insert to db successfully under path {0}'.format(root))
                                # add wrong head result to db
                                if wrong_head_final == []:
                                    main_logger.info('function main: no wrongHead detected under path {0}'.format(root))
                                else:
                                    if common.add_to_db_frame(mysql_db, qry_result[0], wrong_head_final, 'violate_result.report', '偏头', mysql_logger, save_tmp) == False:
                                        main_logger.error('function main: wrongHead result insert to db failed under path {0}'.format(root))
                                    else:
                                        main_logger.info('function main: wrongHead result insert to db successfully under path {0}'.format(root))
                                
                                # add double person result to db
                                if double_person_final == []:
                                    main_logger.info('function main: no double person detected under path {0}'.format(root))
                                else:
                                    if common.add_to_db_frame(mysql_db, qry_result[0], double_person_final, 'violate_result.report', '单人值乘', mysql_logger, save_tmp) == False:
                                        main_logger.error('function main: double person result insert to db failed under path {0}'.format(root))
                                    else:
                                        main_logger.info('function main: double person result insert to db successfully under path {0}'.format(root))
                                # add port shift result to db
                                if port_shift_final == []:
                                    main_logger.info('function main: no port shift violation detected under path {0}'.format(root))
                                else:
                                    if common.add_to_db(mysql_db, qry_result[0], port_shift_final, 'violate_result.report', '同时换端', mysql_logger) == False:
                                        main_logger.error('function main: port shift result insert to db failed under path {0}'.format(root))
                                    else:
                                        main_logger.info('function main: port shift result insert to db successfully under path {0}'.format(root))


                        main_logger.info('function main: updating video table {0}'.format(video_name))
                        if update_video_table(video_name, oracle_db) == False:
                            main_logger.error('function main: video table {0} update failed under path {1}'.format(video_name, root))
                        else:
                            main_logger.info('function main: video table {0} update successfully under path {1}'.format(video_name, root))
                        
                    # video num + 1
                    dir_ct += 1

                    # if all videos corresponding to a lkj file have been analyzed,
                    # then update the lkj table
                    if dir_ct == dir_tot_ct:
                        lkj_id = qry_result[0][-2]
                        main_logger.info('function main: updating lkj table {0} under path {1}'.format(lkj_id,root))
                        if update_lkj_table(oracle_db, mysql_db, lkj_id) == False:
                            main_logger.error('function main: lkj table {0} update failed under path {1}'.format(lkj_id,root))
                        else:
                            main_logger.info('function main: lkj table {0} update successfully under path {1}'.format(lkj_id,root))

            main_logger.info('function main: closing temp file {0}'.format(save_tmp))
            save_tmp.close()
    # close db
    mysql_logger.info('function main: closing database')
    try:
        mysql_db.__del__()
        mysql_logger.info('function main: database close successfully')
    except Exception as e:
        mysql_logger.error('function main: database close failed {0}'.format(e))

    oracle_logger.info('function main: closing database')
    try:
        oracle_db.__del__()
        oracle_logger.info('function main: database close successfully')
    except Exception as e:
        oracle_logger.error('function main: database close failed {0}'.format(e))
        


                    
